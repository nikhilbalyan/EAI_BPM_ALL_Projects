package com.spring.mvc.home.mapping;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import com.spring.mvc.home.beans.CampusMind;
import com.spring.mvc.home.beans.Lead;
import com.spring.mvc.home.beans.Orchard;



public class UserDAOImpl implements UserDAOInterface {

	static SessionFactory sessionFactory = null;
	static Session session = null;
	static Transaction txn = null;

	@Override
	public boolean add(Orchard data) {
		/*int num = 5;
		try {
			for (int i = 0; i < num; i++) {*/
		try {
				Orchard orh = new Orchard();
				Lead tLead = new Lead();
//				CampusMind camp = new CampusMind();
				orh.setBatchID(data.getBatchID());
				orh.setLead(data.getLead());
				
				/*Set<CampusMind> camp = new HashSet<CampusMind>();
				orh.setCampusMind(camp);*/
				
//				tLead.set
				
//				session.save(camp);
//				session.save(tLead);
				session.save(orh);

				// UserDetails usr = new UserDetails();
				// usr.setUserName("user " + i);
				// session.save(usr);
//				session.save(orh);
//			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			session.getTransaction().rollback();
			return false;
		}
		return true;

	}

	@Override
	public boolean read(int batchId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean update(Orchard num) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean delete(int batchId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public CampusMind getCampusMindById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Orchard getOrchardByTrack(String track) {
		// TODO Auto-generated method stub
		return null;
	}

	public static boolean startConnection() {
		try {
			String hibernateFilePath = "hibernate.cfg.xml";

			sessionFactory = new Configuration().configure(hibernateFilePath).buildSessionFactory();
			session = sessionFactory.openSession();
			session.beginTransaction();
			// session.beginTransaction();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			session.getTransaction().rollback();
			return false;
		}
		return true;
	}

	public static boolean closeConnection() {
		try {
			// session.getTransaction().commit();
			// txn.commit();
			session.flush();
			session.close();
		} catch (Exception e) {
			return false;
		}
		return true;
	}

}
